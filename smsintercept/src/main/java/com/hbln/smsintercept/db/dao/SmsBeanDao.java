package com.hbln.smsintercept.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hbln.smsintercept.db.bean.SmsBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SMS_BEAN".
*/
public class SmsBeanDao extends AbstractDao<SmsBean, Long> {

    public static final String TABLENAME = "SMS_BEAN";

    /**
     * Properties of entity SmsBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Create_time = new Property(0, long.class, "create_time", true, "_id");
        public final static Property Mobile = new Property(1, String.class, "mobile", false, "MOBILE");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property IsSuccess = new Property(3, boolean.class, "isSuccess", false, "IS_SUCCESS");
        public final static Property ErrorMsg = new Property(4, String.class, "errorMsg", false, "ERROR_MSG");
    }


    public SmsBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SmsBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SMS_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: create_time
                "\"MOBILE\" TEXT," + // 1: mobile
                "\"CONTENT\" TEXT," + // 2: content
                "\"IS_SUCCESS\" INTEGER NOT NULL ," + // 3: isSuccess
                "\"ERROR_MSG\" TEXT);"); // 4: errorMsg
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SMS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SmsBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCreate_time());
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(2, mobile);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
        stmt.bindLong(4, entity.getIsSuccess() ? 1L: 0L);
 
        String errorMsg = entity.getErrorMsg();
        if (errorMsg != null) {
            stmt.bindString(5, errorMsg);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SmsBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCreate_time());
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(2, mobile);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
        stmt.bindLong(4, entity.getIsSuccess() ? 1L: 0L);
 
        String errorMsg = entity.getErrorMsg();
        if (errorMsg != null) {
            stmt.bindString(5, errorMsg);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public SmsBean readEntity(Cursor cursor, int offset) {
        SmsBean entity = new SmsBean( //
            cursor.getLong(offset + 0), // create_time
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mobile
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.getShort(offset + 3) != 0, // isSuccess
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // errorMsg
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SmsBean entity, int offset) {
        entity.setCreate_time(cursor.getLong(offset + 0));
        entity.setMobile(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsSuccess(cursor.getShort(offset + 3) != 0);
        entity.setErrorMsg(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SmsBean entity, long rowId) {
        entity.setCreate_time(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SmsBean entity) {
        if(entity != null) {
            return entity.getCreate_time();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SmsBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
